{"version":3,"sources":["constants.tsx","App.tsx","reportWebVitals.ts","index.tsx"],"names":["weeksPerMonth","weeksPerYear","moneyRegex","numberRegex","useStyles","makeStyles","theme","card","minWidth","marginBottom","cardContent","display","flexDirection","textField","marginLeft","spacing","marginRight","initialState","salaryPerYear","salaryPerMonth","salaryPerTwoWeeks","salaryPerWeek","salaryPerHour","lastChangedValue","lastChangedType","hoursWorkedPerWeekString","weeksVacationPerYearString","defaultReducer","state","action","reducer","parseInt","type","newValue","parseFloat","toFixed","yearReducer","monthReducer","twoWeekReducer","weekReducer","hourReducer","Wage","classes","useReducer","dispatch","className","Card","CardContent","TextField","id","label","margin","variant","value","onChange","event","target","match","handleYearChange","handleMonthChange","handleTwoWeekChange","handleWeekChange","handleHourChange","handleHoursPerWeekChanged","handleWeeksVacationChanged","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.e16dd632.chunk.js","sourcesContent":["const monthsPerYear: number = 12;\nconst twoWeekPeriodsPerMonth: number = 2.17;\nconst twoWeekPeriodsPerYear: number = 26;\nconst weeksPerMonth: number = 4.3;\nconst weeksPerYear: number = 52;\n\nconst moneyRegex: RegExp = /^\\d{1,}(\\.\\d{0,2})?$/;\nconst numberRegex: RegExp = /^\\d+$/;\n\nexport { monthsPerYear, twoWeekPeriodsPerMonth, weeksPerMonth, weeksPerYear, twoWeekPeriodsPerYear,\n    moneyRegex, numberRegex }\n","import React, {useReducer} from 'react';\nimport { makeStyles } from '@material-ui/core/styles';\nimport { monthsPerYear, twoWeekPeriodsPerMonth, weeksPerMonth, weeksPerYear, twoWeekPeriodsPerYear,\n    moneyRegex, numberRegex } from \"./constants\";\nimport './App.css';\nimport Card from '@material-ui/core/Card';\nimport CardContent from '@material-ui/core/CardContent';\nimport TextField from '@material-ui/core/TextField';\n\n\nconst useStyles = makeStyles(theme => ({\n    card: {\n        minWidth: 275,\n        marginBottom: 25\n    },\n    cardContent: {\n        display: 'flex',\n        flexDirection: 'column',\n    },\n    textField: {\n        marginLeft: theme.spacing(1),\n        marginRight: theme.spacing(1),\n    },\n}));\n\n\ntype StateType = {\n    salaryPerYear: string;\n    salaryPerMonth: string;\n    salaryPerTwoWeeks: string;\n    salaryPerWeek: string;\n    salaryPerHour: string;\n    lastChangedValue: string\n    lastChangedType: string;\n    hoursWorkedPerWeekString: string;\n    weeksVacationPerYearString: string;\n}\n\n\ntype ActionType = {\n    type: string\n    newValue: string,\n    hoursWorkedPerWeekString: string,\n    weeksVacationPerYearString: string\n}\n\n\nconst initialState: StateType = {\n    salaryPerYear: '',\n    salaryPerMonth: '',\n    salaryPerTwoWeeks: '',\n    salaryPerWeek: '',\n    salaryPerHour: '',\n    lastChangedValue: '',\n    lastChangedType: '',\n    hoursWorkedPerWeekString: '40',\n    weeksVacationPerYearString: '3'\n};\n\n\nconst yearReducer = (action: ActionType) => {\n    return {\n        salaryPerYear: action.newValue,\n        salaryPerMonth: (parseFloat(action.newValue)/monthsPerYear).toFixed(2),\n        salaryPerTwoWeeks: (parseFloat(action.newValue)/twoWeekPeriodsPerYear).toFixed(2),\n        salaryPerWeek: (parseFloat(action.newValue)/weeksPerYear).toFixed(2),\n        salaryPerHour: (parseFloat(action.newValue)/(weeksPerYear * parseInt(action.hoursWorkedPerWeekString) - parseInt(action.hoursWorkedPerWeekString) * parseInt(action.weeksVacationPerYearString))).toFixed(2),\n        lastChangedValue: action.newValue,\n        lastChangedType: 'year',\n        hoursWorkedPerWeekString: action.hoursWorkedPerWeekString,\n        weeksVacationPerYearString: action.weeksVacationPerYearString\n    }\n};\n\n\nconst monthReducer = (action: ActionType) => {\n    return {\n        salaryPerYear: (parseFloat(action.newValue) * monthsPerYear).toFixed(2),\n        salaryPerMonth: action.newValue,\n        salaryPerTwoWeeks: (parseFloat(action.newValue)/twoWeekPeriodsPerMonth).toFixed(2),\n        salaryPerWeek: (parseFloat(action.newValue)/weeksPerMonth).toFixed(2),\n        salaryPerHour: (parseFloat(action.newValue)/(weeksPerMonth * parseInt(action.hoursWorkedPerWeekString) - parseInt(action.hoursWorkedPerWeekString) * (parseInt(action.weeksVacationPerYearString)/monthsPerYear))).toFixed(2),\n        lastChangedValue: action.newValue,\n        lastChangedType: 'month',\n        hoursWorkedPerWeekString: action.hoursWorkedPerWeekString,\n        weeksVacationPerYearString: action.weeksVacationPerYearString\n    }\n};\n\n\nconst twoWeekReducer = (action: ActionType) => {\n    return {\n        salaryPerYear: (parseFloat(action.newValue) * twoWeekPeriodsPerYear).toFixed(2),\n        salaryPerMonth: (parseFloat(action.newValue) * weeksPerMonth).toFixed(2),\n        salaryPerTwoWeeks: action.newValue,\n        salaryPerWeek: (parseFloat(action.newValue)/2).toFixed(2),\n        salaryPerHour: (parseFloat(action.newValue) / (2 * parseInt(action.hoursWorkedPerWeekString) - parseInt(action.hoursWorkedPerWeekString) * (parseInt(action.weeksVacationPerYearString) / twoWeekPeriodsPerYear))).toFixed(2),\n        lastChangedValue: action.newValue,\n        lastChangedType: 'two weeks',\n        hoursWorkedPerWeekString: action.hoursWorkedPerWeekString,\n        weeksVacationPerYearString: action.weeksVacationPerYearString\n    }\n};\n\n\nconst weekReducer = (action: ActionType) => {\n    return {\n        salaryPerYear: (parseFloat(action.newValue) * weeksPerYear).toFixed(2),\n        salaryPerMonth: (parseFloat(action.newValue) * weeksPerMonth).toFixed(2),\n        salaryPerTwoWeeks: (parseFloat(action.newValue) * 2).toFixed(2),\n        salaryPerWeek: action.newValue,\n        salaryPerHour: (parseFloat(action.newValue) / (parseInt(action.hoursWorkedPerWeekString) - parseInt(action.hoursWorkedPerWeekString) * (parseInt(action.weeksVacationPerYearString) / weeksPerYear))).toFixed(2),\n        lastChangedValue: action.newValue,\n        lastChangedType: 'week',\n        hoursWorkedPerWeekString: action.hoursWorkedPerWeekString,\n        weeksVacationPerYearString: action.weeksVacationPerYearString\n    }\n};\n\n\nconst hourReducer = (action: ActionType) => {\n    return {\n        salaryPerYear: (parseFloat(action.newValue) * weeksPerYear * parseInt(action.hoursWorkedPerWeekString) - parseInt(action.hoursWorkedPerWeekString) * parseInt(action.hoursWorkedPerWeekString)).toFixed(2),\n        salaryPerMonth: (parseFloat(action.newValue) * weeksPerMonth * parseInt(action.hoursWorkedPerWeekString) - parseInt(action.hoursWorkedPerWeekString) * (parseInt(action.hoursWorkedPerWeekString)/monthsPerYear)).toFixed(2),\n        salaryPerTwoWeeks: (parseFloat(action.newValue) * 2 * parseInt(action.hoursWorkedPerWeekString) - parseInt(action.hoursWorkedPerWeekString) * (parseInt(action.hoursWorkedPerWeekString)/twoWeekPeriodsPerYear)).toFixed(2),\n        salaryPerWeek: (parseFloat(action.newValue) * parseInt(action.hoursWorkedPerWeekString) - parseInt(action.hoursWorkedPerWeekString) * (parseInt(action.hoursWorkedPerWeekString)/weeksPerYear)).toFixed(2),\n        salaryPerHour: action.newValue,\n        lastChangedValue: action.newValue,\n        lastChangedType: 'hour',\n        hoursWorkedPerWeekString: action.hoursWorkedPerWeekString,\n        weeksVacationPerYearString: action.weeksVacationPerYearString\n    }\n};\n\n\nconst defaultReducer = (state: StateType, action: ActionType) => {\n    return {\n        salaryPerYear: state.salaryPerYear,\n        salaryPerMonth: state.salaryPerMonth,\n        salaryPerTwoWeeks: state.salaryPerTwoWeeks,\n        salaryPerWeek: state.salaryPerWeek,\n        salaryPerHour: state.salaryPerHour,\n        lastChangedValue: state.lastChangedValue,\n        lastChangedType: state.lastChangedType,\n        hoursWorkedPerWeekString: action.hoursWorkedPerWeekString,\n        weeksVacationPerYearString: action.weeksVacationPerYearString\n    }\n};\n\n\nconst reducer = (state: StateType, action: ActionType) => {\n    if (!parseInt(action.hoursWorkedPerWeekString) || !parseInt(action.weeksVacationPerYearString)) {\n        return defaultReducer(state, action);\n    }\n\n    switch (action.type) {\n        case 'year':\n            return yearReducer(action);\n        case 'month':\n            return monthReducer(action);\n        case 'two weeks':\n            return twoWeekReducer(action);\n        case 'week':\n            return weekReducer(action);\n        case 'hour':\n            return hourReducer(action);\n        default:\n            return defaultReducer(state, action);\n    }\n};\n\n\nconst Wage: React.FC = () => {\n\n    const classes = useStyles();\n    const [state, dispatch] = useReducer(reducer, initialState);\n\n    const handleYearChange = (event: React.ChangeEvent<HTMLTextAreaElement | HTMLInputElement>) => {\n        let value: string = event.target.value;\n        if (value.match(moneyRegex) || value === '') {\n            dispatch({\n                type: 'year',\n                newValue: value,\n                hoursWorkedPerWeekString: state.hoursWorkedPerWeekString,\n                weeksVacationPerYearString: state.weeksVacationPerYearString\n            });\n        }\n    };\n\n    const handleMonthChange = (event: React.ChangeEvent<HTMLTextAreaElement | HTMLInputElement>) => {\n        let value: string = event.target.value;\n        if (value.match(moneyRegex) || value === '') {\n            dispatch({\n                type: 'month',\n                newValue: value,\n                hoursWorkedPerWeekString: state.hoursWorkedPerWeekString,\n                weeksVacationPerYearString: state.weeksVacationPerYearString\n            });\n        }\n    };\n\n    const handleTwoWeekChange = (event: React.ChangeEvent<HTMLTextAreaElement | HTMLInputElement>) => {\n        let value: string = event.target.value;\n        if (value.match(moneyRegex) || value === '') {\n            dispatch({\n                type: 'two weeks',\n                newValue: value,\n                hoursWorkedPerWeekString: state.hoursWorkedPerWeekString,\n                weeksVacationPerYearString: state.weeksVacationPerYearString\n            });\n        }\n    };\n\n    const handleWeekChange = (event: React.ChangeEvent<HTMLTextAreaElement | HTMLInputElement>) => {\n        let value: string = event.target.value;\n        if (value.match(moneyRegex) || value === '') {\n            dispatch({\n                type: 'week',\n                newValue: value,\n                hoursWorkedPerWeekString: state.hoursWorkedPerWeekString,\n                weeksVacationPerYearString: state.weeksVacationPerYearString\n            });\n        }\n    };\n\n    const handleHourChange = (event: React.ChangeEvent<HTMLTextAreaElement | HTMLInputElement>) => {\n        let value: string = event.target.value;\n        if (value.match(moneyRegex) || value === '') {\n            dispatch({\n                type: 'hour',\n                newValue: value,\n                hoursWorkedPerWeekString: state.hoursWorkedPerWeekString,\n                weeksVacationPerYearString: state.weeksVacationPerYearString\n            });\n        }\n    };\n\n    const handleHoursPerWeekChanged = (event: React.ChangeEvent<HTMLTextAreaElement | HTMLInputElement>) => {\n        let value: string = event.target.value;\n        if (value.match(numberRegex) || value === '') {\n            dispatch({\n                type: state.lastChangedType,\n                newValue: state.lastChangedValue,\n                hoursWorkedPerWeekString: value,\n                weeksVacationPerYearString: state.weeksVacationPerYearString\n            });\n        }\n    };\n\n    const handleWeeksVacationChanged = (event: React.ChangeEvent<HTMLTextAreaElement | HTMLInputElement>) => {\n        let value: string = event.target.value;\n        if (value.match(numberRegex) || value === '') {\n            dispatch({\n                type: state.lastChangedType,\n                newValue: state.lastChangedValue,\n                hoursWorkedPerWeekString: state.hoursWorkedPerWeekString,\n                weeksVacationPerYearString: value\n            });\n        }\n    };\n\n    return (\n        <div className=\"Wage\">\n            <Card className={classes.card}>\n                <CardContent className={classes.cardContent}>\n                    <TextField\n                        id=\"outlined-year\"\n                        label=\"Salary per year\"\n                        className={classes.textField}\n                        margin=\"normal\"\n                        variant=\"outlined\"\n                        value={state.salaryPerYear}\n                        onChange={event => handleYearChange(event)}\n                    />\n                    <TextField\n                        id=\"outlined-month\"\n                        label=\"Salary per month\"\n                        className={classes.textField}\n                        margin=\"normal\"\n                        variant=\"outlined\"\n                        value={state.salaryPerMonth}\n                        onChange={event => handleMonthChange(event)}\n                    />\n                    <TextField\n                        id=\"outlined-two-weeks\"\n                        label=\"Salary per two weeks\"\n                        className={classes.textField}\n                        margin=\"normal\"\n                        variant=\"outlined\"\n                        value={state.salaryPerTwoWeeks}\n                        onChange={event => handleTwoWeekChange(event)}\n                    />\n                    <TextField\n                        id=\"outlined-week\"\n                        label=\"Salary per week\"\n                        className={classes.textField}\n                        margin=\"normal\"\n                        variant=\"outlined\"\n                        value={state.salaryPerWeek}\n                        onChange={event => handleWeekChange(event)}\n                    />\n                    <TextField\n                        id=\"outlined-hour\"\n                        label=\"Salary per hour\"\n                        className={classes.textField}\n                        margin=\"normal\"\n                        variant=\"outlined\"\n                        value={state.salaryPerHour}\n                        onChange={event => handleHourChange(event)}\n                    />\n                    <TextField\n                        id=\"outlined-hours-per-week\"\n                        label=\"Hours worked per week\"\n                        className={classes.textField}\n                        margin=\"normal\"\n                        variant=\"outlined\"\n                        value={state.hoursWorkedPerWeekString}\n                        onChange={event => handleHoursPerWeekChanged(event)}\n                    />\n                    <TextField\n                        id=\"outlined-weeks-vacation-per-year\"\n                        label=\"Weeks of vacation per year\"\n                        className={classes.textField}\n                        margin=\"normal\"\n                        variant=\"outlined\"\n                        value={state.weeksVacationPerYearString}\n                        onChange={event => handleWeeksVacationChanged(event)}\n                    />\n                </CardContent>\n            </Card>\n        </div>\n    );\n};\n\nexport default Wage;\n","import { ReportHandler } from 'web-vitals';\n\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}