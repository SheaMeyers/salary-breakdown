{"version":3,"sources":["constants.tsx","App.tsx","reportWebVitals.ts","index.tsx"],"names":["weeksPerMonth","weeksPerYear","moneyRegex","numberRegex","useStyles","makeStyles","theme","card","minWidth","marginBottom","cardContent","display","flexDirection","textField","marginLeft","spacing","marginRight","initialState","salaryPerYear","salaryPerMonth","salaryPerTwoWeeks","salaryPerWeek","salaryPerHour","lastChangedValue","lastChangedType","hoursWorkedPerWeekString","daysVacationPerYearString","defaultReducer","state","action","reducer","parseInt","type","newValue","parseFloat","toFixed","yearReducer","monthReducer","twoWeekReducer","weekReducer","hourReducer","Wage","classes","useReducer","dispatch","className","Card","CardContent","style","margin","TextField","id","label","variant","value","onChange","event","target","match","handleYearChange","handleMonthChange","handleTwoWeekChange","handleWeekChange","handleHourChange","handleHoursPerWeekChanged","handledaysVacationChanged","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.8660864e.chunk.js","sourcesContent":["const monthsPerYear: number = 12;\nconst twoWeekPeriodsPerMonth: number = 2.17;\nconst twoWeekPeriodsPerYear: number = 26;\nconst weeksPerMonth: number = 4.3;\nconst weeksPerYear: number = 52;\n\nconst moneyRegex: RegExp = /^\\d{1,}(\\.\\d{0,2})?$/;\nconst numberRegex: RegExp = /^\\d+$/;\n\nexport { monthsPerYear, twoWeekPeriodsPerMonth, weeksPerMonth, weeksPerYear, twoWeekPeriodsPerYear,\n    moneyRegex, numberRegex }\n","import React, { useReducer } from \"react\";\nimport { makeStyles } from \"@material-ui/core/styles\";\nimport {\n  monthsPerYear,\n  twoWeekPeriodsPerMonth,\n  weeksPerMonth,\n  weeksPerYear,\n  twoWeekPeriodsPerYear,\n  moneyRegex,\n  numberRegex,\n} from \"./constants\";\nimport \"./App.css\";\nimport Card from \"@material-ui/core/Card\";\nimport CardContent from \"@material-ui/core/CardContent\";\nimport TextField from \"@material-ui/core/TextField\";\n\nconst useStyles = makeStyles((theme) => ({\n  card: {\n    minWidth: 275,\n    marginBottom: 25,\n  },\n  cardContent: {\n    display: \"flex\",\n    flexDirection: \"column\",\n  },\n  textField: {\n    marginLeft: theme.spacing(1),\n    marginRight: theme.spacing(1),\n  },\n}));\n\ntype StateType = {\n  salaryPerYear: string;\n  salaryPerMonth: string;\n  salaryPerTwoWeeks: string;\n  salaryPerWeek: string;\n  salaryPerHour: string;\n  lastChangedValue: string;\n  lastChangedType: string;\n  hoursWorkedPerWeekString: string;\n  daysVacationPerYearString: string;\n};\n\nexport type ActionType = {\n  type: string;\n  newValue: string;\n  hoursWorkedPerWeekString: string;\n  daysVacationPerYearString: string;\n};\n\nconst initialState: StateType = {\n  salaryPerYear: \"\",\n  salaryPerMonth: \"\",\n  salaryPerTwoWeeks: \"\",\n  salaryPerWeek: \"\",\n  salaryPerHour: \"\",\n  lastChangedValue: \"\",\n  lastChangedType: \"\",\n  hoursWorkedPerWeekString: \"40\",\n  daysVacationPerYearString: \"20\",\n};\n\nexport const yearReducer = (action: ActionType) => {\n  return {\n    salaryPerYear: action.newValue,\n    salaryPerMonth: (parseFloat(action.newValue) / monthsPerYear).toFixed(2),\n    salaryPerTwoWeeks: (\n      parseFloat(action.newValue) / twoWeekPeriodsPerYear\n    ).toFixed(2),\n    salaryPerWeek: (parseFloat(action.newValue) / weeksPerYear).toFixed(2),\n    salaryPerHour: (\n      parseFloat(action.newValue) /\n      (weeksPerYear * parseInt(action.hoursWorkedPerWeekString) -\n        parseInt(action.hoursWorkedPerWeekString) *\n          (parseInt(action.daysVacationPerYearString) / 5))\n    ).toFixed(2),\n    lastChangedValue: action.newValue,\n    lastChangedType: \"year\",\n    hoursWorkedPerWeekString: action.hoursWorkedPerWeekString,\n    daysVacationPerYearString: action.daysVacationPerYearString,\n  };\n};\n\nexport const monthReducer = (action: ActionType) => {\n  return {\n    salaryPerYear: (parseFloat(action.newValue) * monthsPerYear).toFixed(2),\n    salaryPerMonth: action.newValue,\n    salaryPerTwoWeeks: (\n      parseFloat(action.newValue) / twoWeekPeriodsPerMonth\n    ).toFixed(2),\n    salaryPerWeek: (parseFloat(action.newValue) / weeksPerMonth).toFixed(2),\n    salaryPerHour: (\n      parseFloat(action.newValue) /\n      (weeksPerMonth * parseInt(action.hoursWorkedPerWeekString) -\n        parseInt(action.hoursWorkedPerWeekString) *\n          ((parseInt(action.daysVacationPerYearString) / 5) / monthsPerYear))\n    ).toFixed(2),\n    lastChangedValue: action.newValue,\n    lastChangedType: \"month\",\n    hoursWorkedPerWeekString: action.hoursWorkedPerWeekString,\n    daysVacationPerYearString: action.daysVacationPerYearString,\n  };\n};\n\nexport const twoWeekReducer = (action: ActionType) => {\n  return {\n    salaryPerYear: (\n      parseFloat(action.newValue) * twoWeekPeriodsPerYear\n    ).toFixed(2),\n    salaryPerMonth: (parseFloat(action.newValue) * weeksPerMonth).toFixed(2),\n    salaryPerTwoWeeks: action.newValue,\n    salaryPerWeek: (parseFloat(action.newValue) / 2).toFixed(2),\n    salaryPerHour: (\n      parseFloat(action.newValue) /\n      (2 * parseInt(action.hoursWorkedPerWeekString) -\n        parseInt(action.hoursWorkedPerWeekString) *\n          ((parseInt(action.daysVacationPerYearString) / 5) / twoWeekPeriodsPerYear))\n    ).toFixed(2),\n    lastChangedValue: action.newValue,\n    lastChangedType: \"two weeks\",\n    hoursWorkedPerWeekString: action.hoursWorkedPerWeekString,\n    daysVacationPerYearString: action.daysVacationPerYearString,\n  };\n};\n\nexport const weekReducer = (action: ActionType) => {\n  return {\n    salaryPerYear: (parseFloat(action.newValue) * weeksPerYear).toFixed(2),\n    salaryPerMonth: (parseFloat(action.newValue) * weeksPerMonth).toFixed(2),\n    salaryPerTwoWeeks: (parseFloat(action.newValue) * 2).toFixed(2),\n    salaryPerWeek: action.newValue,\n    salaryPerHour: (\n      parseFloat(action.newValue) /\n      (parseInt(action.hoursWorkedPerWeekString) -\n        parseInt(action.hoursWorkedPerWeekString) *\n          ((parseInt(action.daysVacationPerYearString) / 5) / weeksPerYear))\n    ).toFixed(2),\n    lastChangedValue: action.newValue,\n    lastChangedType: \"week\",\n    hoursWorkedPerWeekString: action.hoursWorkedPerWeekString,\n    daysVacationPerYearString: action.daysVacationPerYearString,\n  };\n};\n\nexport const hourReducer = (action: ActionType) => {\n  return {\n    salaryPerYear: (\n      parseFloat(action.newValue) *\n        weeksPerYear *\n        parseInt(action.hoursWorkedPerWeekString) -\n      parseInt(action.hoursWorkedPerWeekString) *\n        parseInt(action.hoursWorkedPerWeekString)\n    ).toFixed(2),\n    salaryPerMonth: (\n      parseFloat(action.newValue) *\n        weeksPerMonth *\n        parseInt(action.hoursWorkedPerWeekString) -\n      parseInt(action.hoursWorkedPerWeekString) *\n        (parseInt(action.hoursWorkedPerWeekString) / monthsPerYear)\n    ).toFixed(2),\n    salaryPerTwoWeeks: (\n      parseFloat(action.newValue) *\n        2 *\n        parseInt(action.hoursWorkedPerWeekString) -\n      parseInt(action.hoursWorkedPerWeekString) *\n        (parseInt(action.hoursWorkedPerWeekString) / twoWeekPeriodsPerYear)\n    ).toFixed(2),\n    salaryPerWeek: (\n      parseFloat(action.newValue) * parseInt(action.hoursWorkedPerWeekString) -\n      parseInt(action.hoursWorkedPerWeekString) *\n        (parseInt(action.hoursWorkedPerWeekString) / weeksPerYear)\n    ).toFixed(2),\n    salaryPerHour: action.newValue,\n    lastChangedValue: action.newValue,\n    lastChangedType: \"hour\",\n    hoursWorkedPerWeekString: action.hoursWorkedPerWeekString,\n    daysVacationPerYearString: action.daysVacationPerYearString,\n  };\n};\n\nconst defaultReducer = (state: StateType, action: ActionType) => {\n  return {\n    salaryPerYear: state.salaryPerYear,\n    salaryPerMonth: state.salaryPerMonth,\n    salaryPerTwoWeeks: state.salaryPerTwoWeeks,\n    salaryPerWeek: state.salaryPerWeek,\n    salaryPerHour: state.salaryPerHour,\n    lastChangedValue: state.lastChangedValue,\n    lastChangedType: state.lastChangedType,\n    hoursWorkedPerWeekString: action.hoursWorkedPerWeekString,\n    daysVacationPerYearString: action.daysVacationPerYearString,\n  };\n};\n\nconst reducer = (state: StateType, action: ActionType) => {\n  if (\n    !parseInt(action.hoursWorkedPerWeekString) ||\n    !parseInt(action.daysVacationPerYearString)\n  ) {\n    return defaultReducer(state, action);\n  }\n\n  switch (action.type) {\n    case \"year\":\n      return yearReducer(action);\n    case \"month\":\n      return monthReducer(action);\n    case \"two weeks\":\n      return twoWeekReducer(action);\n    case \"week\":\n      return weekReducer(action);\n    case \"hour\":\n      return hourReducer(action);\n    default:\n      return defaultReducer(state, action);\n  }\n};\n\nconst Wage: React.FC = () => {\n  const classes = useStyles();\n  const [state, dispatch] = useReducer(reducer, initialState);\n\n  const handleYearChange = (\n    event: React.ChangeEvent<HTMLTextAreaElement | HTMLInputElement>\n  ) => {\n    let value: string = event.target.value;\n    if (value.match(moneyRegex) || value === \"\") {\n      dispatch({\n        type: \"year\",\n        newValue: value,\n        hoursWorkedPerWeekString: state.hoursWorkedPerWeekString,\n        daysVacationPerYearString: state.daysVacationPerYearString,\n      });\n    }\n  };\n\n  const handleMonthChange = (\n    event: React.ChangeEvent<HTMLTextAreaElement | HTMLInputElement>\n  ) => {\n    let value: string = event.target.value;\n    if (value.match(moneyRegex) || value === \"\") {\n      dispatch({\n        type: \"month\",\n        newValue: value,\n        hoursWorkedPerWeekString: state.hoursWorkedPerWeekString,\n        daysVacationPerYearString: state.daysVacationPerYearString,\n      });\n    }\n  };\n\n  const handleTwoWeekChange = (\n    event: React.ChangeEvent<HTMLTextAreaElement | HTMLInputElement>\n  ) => {\n    let value: string = event.target.value;\n    if (value.match(moneyRegex) || value === \"\") {\n      dispatch({\n        type: \"two weeks\",\n        newValue: value,\n        hoursWorkedPerWeekString: state.hoursWorkedPerWeekString,\n        daysVacationPerYearString: state.daysVacationPerYearString,\n      });\n    }\n  };\n\n  const handleWeekChange = (\n    event: React.ChangeEvent<HTMLTextAreaElement | HTMLInputElement>\n  ) => {\n    let value: string = event.target.value;\n    if (value.match(moneyRegex) || value === \"\") {\n      dispatch({\n        type: \"week\",\n        newValue: value,\n        hoursWorkedPerWeekString: state.hoursWorkedPerWeekString,\n        daysVacationPerYearString: state.daysVacationPerYearString,\n      });\n    }\n  };\n\n  const handleHourChange = (\n    event: React.ChangeEvent<HTMLTextAreaElement | HTMLInputElement>\n  ) => {\n    let value: string = event.target.value;\n    if (value.match(moneyRegex) || value === \"\") {\n      dispatch({\n        type: \"hour\",\n        newValue: value,\n        hoursWorkedPerWeekString: state.hoursWorkedPerWeekString,\n        daysVacationPerYearString: state.daysVacationPerYearString,\n      });\n    }\n  };\n\n  const handleHoursPerWeekChanged = (\n    event: React.ChangeEvent<HTMLTextAreaElement | HTMLInputElement>\n  ) => {\n    let value: string = event.target.value;\n    if (value.match(numberRegex) || value === \"\") {\n      dispatch({\n        type: state.lastChangedType,\n        newValue: state.lastChangedValue,\n        hoursWorkedPerWeekString: value,\n        daysVacationPerYearString: state.daysVacationPerYearString,\n      });\n    }\n  };\n\n  const handledaysVacationChanged = (\n    event: React.ChangeEvent<HTMLTextAreaElement | HTMLInputElement>\n  ) => {\n    let value: string = event.target.value;\n    if (value.match(numberRegex) || value === \"\") {\n      dispatch({\n        type: state.lastChangedType,\n        newValue: state.lastChangedValue,\n        hoursWorkedPerWeekString: state.hoursWorkedPerWeekString,\n        daysVacationPerYearString: value,\n      });\n    }\n  };\n\n  return (\n    <div className=\"Wage\">\n      <Card className={classes.card}>\n        <CardContent className={classes.cardContent}>\n          <h1 style={{ margin: 0 }}>Salary Breakdown</h1>\n          <h2 style={{ margin: 0 }}>See Your Salary in Different Amounts</h2>\n          <TextField\n            id=\"outlined-year\"\n            label=\"Salary per year\"\n            className={classes.textField}\n            margin=\"normal\"\n            variant=\"outlined\"\n            value={state.salaryPerYear || ''}\n            onChange={(event) => handleYearChange(event)}\n          />\n          <TextField\n            id=\"outlined-month\"\n            label=\"Salary per month\"\n            className={classes.textField}\n            margin=\"normal\"\n            variant=\"outlined\"\n            value={state.salaryPerMonth || ''}\n            onChange={(event) => handleMonthChange(event)}\n          />\n          <TextField\n            id=\"outlined-two-weeks\"\n            label=\"Salary per two weeks\"\n            className={classes.textField}\n            margin=\"normal\"\n            variant=\"outlined\"\n            value={state.salaryPerTwoWeeks || ''}\n            onChange={(event) => handleTwoWeekChange(event)}\n          />\n          <TextField\n            id=\"outlined-week\"\n            label=\"Salary per week\"\n            className={classes.textField}\n            margin=\"normal\"\n            variant=\"outlined\"\n            value={state.salaryPerWeek || ''}\n            onChange={(event) => handleWeekChange(event)}\n          />\n          <TextField\n            id=\"outlined-hour\"\n            label=\"Salary per hour\"\n            className={classes.textField}\n            margin=\"normal\"\n            variant=\"outlined\"\n            value={state.salaryPerHour || ''}\n            onChange={(event) => handleHourChange(event)}\n          />\n          <TextField\n            id=\"outlined-hours-per-week\"\n            label=\"Hours worked per week\"\n            className={classes.textField}\n            margin=\"normal\"\n            variant=\"outlined\"\n            value={state.hoursWorkedPerWeekString}\n            onChange={(event) => handleHoursPerWeekChanged(event)}\n          />\n          <TextField\n            id=\"outlined-weeks-vacation-per-year\"\n            label=\"Days of vacation per year\"\n            className={classes.textField}\n            margin=\"normal\"\n            variant=\"outlined\"\n            value={state.daysVacationPerYearString}\n            onChange={(event) => handledaysVacationChanged(event)}\n          />\n        </CardContent>\n      </Card>\n    </div>\n  );\n};\n\nexport default Wage;\n","import { ReportHandler } from 'web-vitals';\n\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}